name: Publish with gpg plugin

on:
  # on push tag
  push:
    tags: ['*']

jobs:

  PublishGPG:
    runs-on: ubuntu-latest

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: check out source repository
        uses: actions/checkout@v2

      # setup scala@v2
      - uses: olafurpg/setup-scala@v7

      # setup gpg
      - run: |
          sudo apt-get update && sudo apt-get -y install gnupg2
          mkdir ~/.gnupg && chmod 700 ~/.gnupg
          echo use-agent >> ~/.gnupg/gpg.conf
          echo pinentry-mode loopback >> ~/.gnupg/gpg.conf
          echo allow-loopback-pinentry >> ~/.gnupg/gpg-agent.conf
          chmod 600 ~/.gnupg/*
          echo RELOADAGENT | gpg-connect-agent
          echo $PGP_SECRET | base64 --decode | gpg --import --no-tty --batch --yes
        env:
          PGP_SECRET: ${{secrets.PGP_SECRET}}

      # cache stuff
      - uses: actions/cache@v2
          with:
            path: |
              ~/.cache/coursier
              ~/.ivy2/cache
              ~/.sbt
              !~/.ivy2/.sbt.ivy.lock
              !~/.ivy2/cache/**/ivydata-*.properties
              !~/.sbt/**/*.lock
            key: ${{ runner.os }}-sbt-cache-${{ hashFiles('**/*.sbt') }}-${{ hashFiles('project/build.properties') }}

      # release action
      - name: Publish ${{ github.ref }}
        run: sbt ci-release
        env: # Add env variables from secrets
          GITHUB_REF: ${{ github.ref }}
          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
          PGP_SECRET: ${{ secrets.PGP_SECRET }}
          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PW }}
